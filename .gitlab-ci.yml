image: thecodingmachine/php:8.2-v4-cli-node20

stages:
  - caching
  - testing
  - qualifying

variables:
  TRIGGER_CACHE: "off"
  
## règles du pipeline total
## utilisation d'une variables d'environnements prédéfinies
## https://docs.gitlab.com/ci/variables/predefined_variables/
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"


generate_deps:
  stage: caching
  tags:
    - formation
  script:
    - cd project
    - composer install
  cache:
    key: deps
    policy: push
    paths:
      - project/vendor
  rules:
    - changes:
        - project/composer.json
    - if: $TRIGGER_CACHE == "on" # /[]{2}.*$/
      when: on_success

# utilisation du registre de package générique
# pour hoster les jeux de données volumineux
# https://archives.docs.gitlab.com/17.7/ee/user/packages/generic_packages/index.html#publish-a-package
## publication
# -k: cert tls auto-signe | -L: redirects | -H: header
# curl -k -L -H "PRIVATE-TOKEN: <personal_access_token>" \
#      --upload-file /vagrant/project/tests/fixtures/amounts.csv \
#      "https://gitlab.lan.fr/api/v4/projects/1/packages/generic/fixtures/0.0.1/amounts.csv"


test:
  stage: testing
  tags:
    - formation
  before_script:
    - >
      sed -i 
      "s|pcov.directory = __DIR__|pcov.directory = $CI_PROJECT_DIR/project|g" 
      40-pcov.ini
    - sudo mv 40-pcov.ini /etc/php/8.2/cli/conf.d/
    # - >
    #   curl -k -L
    #   -H "JOB-TOKEN: ${CI_JOB_TOKEN}"
    #   "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fixtures/0.0.1/amounts.csv"
    #   -o project/tests/fixtures/amounts.csv
  script:
    - cd project
    - >
      php ./vendor/bin/phpunit 
      -c phpunit.xml
      --log-junit=test.xml 
      --coverage-cobertura=cobertura.xml
      --coverage-clover=clover.xml
      --coverage-text --colors=never
      tests
  coverage: /^\s*Lines:\s*\d+.\d+\%/
  artifacts:
    when: always
    expire_in: "1 hour"
    # remontée dans gitlab en téléchargement
    # ET transfert par défaut dans les jobs suivants
    paths:
      - project/clover.xml
    reports:
      junit: project/test.xml
      coverage_report:
        path: project/cobertura.xml
        coverage_format: cobertura
  cache:
    key: deps
    untracked: true
    policy: pull

# exécution de la qualité APRES les tests
# car le job doit être bloquant et un critère important est la couverture de code
# qui vient du job test !!
sonar:
  stage: qualifying
  image:
    name: sonarsource/sonar-scanner-cli:11
    # neutralisation du entrypoint par défaut de l'image
    #  cette commande parasite le lancement du job avec gitlab !!
    entrypoint: [""]
  tags:
    - formation
  script:
    # SONAR_TOKEN vient d'une variable cachée dans gitlab
    # project > settings > CI/CD > Variables > add variables
    # variable > Masked & Hidden > unchecked "protected"
    ## !! atention au scope sinon l'analyse peut péter avec le dossier vendor
    - >
      sonar-scanner
      -Dsonar.projectKey=project
      -Dsonar.sources=./project
      -Dsonar.exclusions=./project/vendor
      -Dsonar.coverage.exclusions=**/tests/**
      -Dsonar.php.coverage.reportPaths=./project/clover.xml
      -Dsonar.host.url=http://gitlab.lan.fr:9000
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.qualitygate.wait=true

  
## job de déploiement sur un tag git

## job d'interface avec phpunit + selenium 